<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="number-of-threads" elementType="Argument">
            <stringProp name="Argument.name">number-of-threads</stringProp>
            <stringProp name="Argument.value">18</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">JMeter thread group property</stringProp>
          </elementProp>
          <elementProp name="coeditors-count" elementType="Argument">
            <stringProp name="Argument.name">coeditors-count</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">number of co-authors in one document. Set by the number of lines in changes.csv</stringProp>
          </elementProp>
          <elementProp name="server-name-or-ip" elementType="Argument">
            <stringProp name="Argument.name">server-name-or-ip</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">websocket host (HTTP).Set [services.CoAuthoring.token.enable.browser](https://api.onlyoffice.com/editors/signature/) configuration file property to false.  5. Set `services.CoAuthoring.socketio.connection.pingInterval` configuration file property to 1000000000.</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">websocket port, whole url look like `ws://${server-name-or-ip}:${port}/doc/${doc-id}/c/806/e204ietx/websocket`</stringProp>
          </elementProp>
          <elementProp name="document-url" elementType="Argument">
            <stringProp name="Argument.name">document-url</stringProp>
            <stringProp name="Argument.value">http://d2ettrnqo7v976.cloudfront.net/stress-test/jmeter-test.docx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">url to document</stringProp>
          </elementProp>
          <elementProp name="save-changes-throughput-per-minute" elementType="Argument">
            <stringProp name="Argument.name">save-changes-throughput-per-minute</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">amount of saveChanges per minute(see jmeter constant throughput timer)</stringProp>
          </elementProp>
          <elementProp name="close-session-percent-per-minute" elementType="Argument">
            <stringProp name="Argument.name">close-session-percent-per-minute</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">percentage of threads closing the connection at the end of the minute. calculated randomly for each thread (if (Math.random() * 100 &gt; ${close-session-percent-per-minute}) {continue;} else {close;})</stringProp>
          </elementProp>
          <elementProp name="save-lock-delay" elementType="Argument">
            <stringProp name="Argument.name">save-lock-delay</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.desc">constant delay for repeating saveLock request</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="save-lock-delay-random" elementType="Argument">
            <stringProp name="Argument.name">save-lock-delay-random</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">random delay maximum</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connect-timeout" elementType="Argument">
            <stringProp name="Argument.name">connect-timeout</stringProp>
            <stringProp name="Argument.value">20000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connect timeout (ms) for all requests</stringProp>
          </elementProp>
          <elementProp name="download-timeout" elementType="Argument">
            <stringProp name="Argument.name">download-timeout</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response (read) timeout (ms) for operations: &quot;read documentOpen&quot;</stringProp>
          </elementProp>
          <elementProp name="auth-timeout" elementType="Argument">
            <stringProp name="Argument.name">auth-timeout</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response (read) timeout (ms) for operations: &quot;open and send auth&quot;</stringProp>
          </elementProp>
          <elementProp name="read-timeout" elementType="Argument">
            <stringProp name="Argument.name">read-timeout</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.desc">Response (read) timeout (ms) for operations: &quot;read license&quot;, &quot;read auth&quot;, &quot;read getLock&quot;, &quot;read saveLock&quot;, &quot;read unSaveLock&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="conversion-timeout" elementType="Argument">
            <stringProp name="Argument.name">conversion-timeout</stringProp>
            <stringProp name="Argument.value">600000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response (read) timeout (ms) for operations: &quot;read documentOpen&quot;</stringProp>
          </elementProp>
          <elementProp name="close-timeout" elementType="Argument">
            <stringProp name="Argument.name">close-timeout</stringProp>
            <stringProp name="Argument.value">60000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Response (read) timeout (ms) for operations: &quot;close&quot;</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Ð¡onfigurable test parameters</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Auxiliary" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="callback-url" elementType="Argument">
            <stringProp name="Argument.name">callback-url</stringProp>
            <stringProp name="Argument.value">http://${server-name-or-ip}:${port}/dummyCallback</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">return {&quot;error&quot;: 0}</stringProp>
          </elementProp>
          <elementProp name="doc-id-prefix" elementType="Argument">
            <stringProp name="Argument.name">doc-id-prefix</stringProp>
            <stringProp name="Argument.value">jmeter-${__Random(111111111111,999999999999)}-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">unique prefix to avoid cache conflicts left over from running previous tests</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Auxiliary test parameters</stringProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Changes" enabled="true">
        <stringProp name="delimiter">\t</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">./dataset/changes.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">changes</stringProp>
        <stringProp name="TestPlan.comments">&quot;changes&quot; as lines in a file</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${number-of-threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1475408602000</longProp>
        <longProp name="ThreadGroup.end_time">1475408602000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;doc-id&quot;, &quot;${doc-id-prefix}&quot; + (Math.ceil(${__threadNum} / ${coeditors-count}) as int))</stringProp>
          <stringProp name="TestPlan.comments">Construct thread document id</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
          <stringProp name="comparisonType">NotContainsRegex</stringProp>
          <stringProp name="matchValue">(0\{&quot;sid&quot;)|(40\{&quot;sid&quot;\:)|(&quot;type&quot;\:&quot;license&quot;)|(&quot;type&quot;\:&quot;auth&quot;)|(&quot;type&quot;\:&quot;waitAuth&quot;)|(&quot;type&quot;\:&quot;documentOpen&quot;)|(&quot;type&quot;\:&quot;saveLock&quot;)|(&quot;type&quot;\:&quot;unSaveLock&quot;)</stringProp>
          <stringProp name="TestPlan.comments">filter unused messages in co-editing</stringProp>
        </eu.luminis.jmeter.wssampler.TextFrameFilter>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
            <boolProp name="replyToPing">true</boolProp>
            <stringProp name="filterType">FilterAll</stringProp>
          </eu.luminis.jmeter.wssampler.PingFrameFilter>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="open and send auth" enabled="true">
            <boolProp name="createNewConnection">true</boolProp>
            <stringProp name="server">${server-name-or-ip}</stringProp>
            <stringProp name="port">${port}</stringProp>
            <stringProp name="path">/doc/${doc-id}/c/?EIO=4&amp;transport=websocket</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">40{&quot;token&quot;:&quot;&quot;}</stringProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="connectTimeout">${connect-timeout}</stringProp>
            <stringProp name="readTimeout">${read-timeout}</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read handshake" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">${connect-timeout}</stringProp>
            <stringProp name="dataType">Text</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">${read-timeout}</stringProp>
            <boolProp name="optional">false</boolProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1128790275">40{&quot;sid&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read license" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">${connect-timeout}</stringProp>
            <stringProp name="dataType">Text</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">${read-timeout}</stringProp>
            <boolProp name="optional">false</boolProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-717020945">&quot;type&quot;:&quot;license&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="write auth" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;auth&quot;,&quot;docid&quot;:&quot;${doc-id}&quot;,&quot;documentCallbackUrl&quot;:&quot;${callback-url}&quot;,&quot;token&quot;:&quot;fghhfgsjdgfjs&quot;,&quot;user&quot;:{&quot;id&quot;:&quot;uid-1&quot;,&quot;username&quot;:&quot;John Smith&quot;,&quot;firstname&quot;:null,&quot;lastname&quot;:null,&quot;indexUser&quot;:-1},&quot;editorType&quot;:0,&quot;lastOtherSaveTime&quot;:-1,&quot;block&quot;:[],&quot;sessionId&quot;:null,&quot;sessionTimeConnect&quot;:null,&quot;sessionTimeIdle&quot;:0,&quot;documentFormatSave&quot;:65,&quot;view&quot;:false,&quot;isCloseCoAuthoring&quot;:false,&quot;openCmd&quot;:{&quot;c&quot;:&quot;open&quot;,&quot;id&quot;:&quot;${doc-id}&quot;,&quot;userid&quot;:&quot;uid-1&quot;,&quot;format&quot;:&quot;docx&quot;,&quot;url&quot;:&quot;${document-url}&quot;,&quot;title&quot;:&quot;new (47).docx&quot;,&quot;lcid&quot;:9,&quot;nobase64&quot;:true,&quot;convertToOrigin&quot;:&quot;.pdf.xps.oxps.djvu&quot;},&quot;lang&quot;:&quot;en&quot;,&quot;mode&quot;:&quot;edit&quot;,&quot;permissions&quot;:{&quot;chat&quot;:true,&quot;comment&quot;:true,&quot;copy&quot;:true,&quot;download&quot;:true,&quot;edit&quot;:true,&quot;fillForms&quot;:true,&quot;modifyContentControl&quot;:true,&quot;modifyFilter&quot;:true,&quot;print&quot;:true,&quot;review&quot;:true,&quot;reviewGroups&quot;:null,&quot;commentGroups&quot;:{},&quot;userInfoGroups&quot;:null},&quot;IsAnonymousUser&quot;:false,&quot;timezoneOffset&quot;:-180,&quot;coEditingMode&quot;:&quot;fast&quot;,&quot;jwtOpen&quot;:&quot;&quot;,&quot;supportAuthChangesAck&quot;:true}]</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read auth" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">${connect-timeout}</stringProp>
            <stringProp name="dataType">Text</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">${auth-timeout}</stringProp>
            <boolProp name="optional">false</boolProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-255618740">&quot;type&quot;:&quot;auth&quot;</stringProp>
                <stringProp name="1200453591">&quot;type&quot;:&quot;waitAuth&quot;</stringProp>
                <stringProp name="1479418511">&quot;type&quot;:&quot;documentOpen&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">auth-type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;type&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(&quot;${auth-type}&quot; == &quot;auth&quot;,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read documentOpen" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">${connect-timeout}</stringProp>
              <stringProp name="dataType">Text</stringProp>
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="readTimeout">${conversion-timeout}</stringProp>
              <boolProp name="optional">false</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479418511">&quot;type&quot;:&quot;documentOpen&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">editor-bin-url</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;Editor.bin&quot;:&quot;([^&quot;]+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="download Editor.bin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${editor-bin-url}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${connect-timeout}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${download-timeout}</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(&quot;${auth-type}&quot; == &quot;waitAuth&quot;,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read auth or documentOpen" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">${connect-timeout}</stringProp>
              <stringProp name="dataType">Text</stringProp>
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="readTimeout">${conversion-timeout}</stringProp>
              <boolProp name="optional">false</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479418511">&quot;type&quot;:&quot;documentOpen&quot;</stringProp>
                  <stringProp name="-255618740">&quot;type&quot;:&quot;auth&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read auth or documentOpen" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">${connect-timeout}</stringProp>
              <stringProp name="dataType">Text</stringProp>
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="readTimeout">${conversion-timeout}</stringProp>
              <boolProp name="optional">false</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1479418511">&quot;type&quot;:&quot;documentOpen&quot;</stringProp>
                  <stringProp name="-255618740">&quot;type&quot;:&quot;auth&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(&quot;${auth-type}&quot; == &quot;documentOpen&quot;,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read auth" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">${connect-timeout}</stringProp>
              <stringProp name="dataType">Text</stringProp>
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="readTimeout">${conversion-timeout}</stringProp>
              <boolProp name="optional">false</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-255618740">&quot;type&quot;:&quot;auth&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="wait conversions" enabled="false">
            <stringProp name="groupSize">${number-of-threads}</stringProp>
            <stringProp name="timeoutInMs">${conversion-timeout}</stringProp>
          </SyncTimer>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${save-changes-throughput-per-minute}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">iteration-index</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(${iteration-index} &lt; ${save-changes-throughput-per-minute} || Math.random() * 100 &gt; ${close-session-percent-per-minute},)}</stringProp>
          </WhileController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${save-changes-throughput-per-minute}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">iteration-index</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
                <stringProp name="comparisonType">NotContainsRegex</stringProp>
                <stringProp name="matchValue">(&quot;type&quot;\:&quot;saveLock&quot;)|(&quot;type&quot;\:&quot;unSaveLock&quot;)</stringProp>
              </eu.luminis.jmeter.wssampler.TextFrameFilter>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send getLock" enabled="false">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;getLock&quot;,&quot;block&quot;:[&quot;1234&quot;]}]</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send getLock-rand" enabled="false">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;getLock&quot;,&quot;block&quot;:[&quot;${__Random(0000,9999)}&quot;]}]</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read getLock" enabled="false">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <stringProp name="dataType">Text</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <stringProp name="readTimeout">${read-timeout}</stringProp>
                <boolProp name="optional">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="952626296">42[&quot;message&quot;,{&quot;type&quot;:&quot;getLock&quot;,&quot;locks&quot;:{&quot;${user-id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send isSaveLock" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;isSaveLock&quot;}]</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read saveLock" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <stringProp name="dataType">Text</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <stringProp name="readTimeout">${read-timeout}</stringProp>
                <boolProp name="optional">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1926490708">&quot;type&quot;:&quot;saveLock&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">save-lock-res</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;saveLock&quot;\:(.*?)\}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${save-lock-res}&quot; == &quot;true&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${save-lock-delay}</stringProp>
                  <stringProp name="RandomTimer.range">${save-lock-delay-random}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send isSaveLock" enabled="true">
                  <boolProp name="TLS">false</boolProp>
                  <stringProp name="server"></stringProp>
                  <stringProp name="port">80</stringProp>
                  <stringProp name="path"></stringProp>
                  <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                  <boolProp name="binaryPayload">false</boolProp>
                  <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;isSaveLock&quot;}]</stringProp>
                  <boolProp name="createNewConnection">false</boolProp>
                  <boolProp name="loadDataFromFile">false</boolProp>
                  <stringProp name="dataFile"></stringProp>
                </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                <hashTree/>
                <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read saveLock" enabled="true">
                  <boolProp name="TLS">false</boolProp>
                  <stringProp name="server"></stringProp>
                  <stringProp name="port">80</stringProp>
                  <stringProp name="path"></stringProp>
                  <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                  <stringProp name="dataType">Text</stringProp>
                  <boolProp name="createNewConnection">false</boolProp>
                  <stringProp name="readTimeout">${read-timeout}</stringProp>
                  <boolProp name="optional">false</boolProp>
                </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1926490708">&quot;type&quot;:&quot;saveLock&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">save-lock-res</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;saveLock&quot;\:(.*?)\}</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send saveChanges" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;saveChanges&quot;,&quot;changes&quot;:&quot;${changes}&quot;,&quot;startSaveChanges&quot;:true,&quot;endSaveChanges&quot;:true,&quot;isCoAuthoring&quot;:false,&quot;isExcel&quot;:false,&quot;deleteIndex&quot;:null,&quot;unlock&quot;:false,&quot;releaseLocks&quot;:false}]</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="read unSaveLock" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <stringProp name="dataType">Text</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <stringProp name="readTimeout">${read-timeout}</stringProp>
                <boolProp name="optional">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="982881939">&quot;type&quot;:&quot;unSaveLock&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="send unLockDocument" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">${connect-timeout}</stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">42[&quot;message&quot;,{&quot;type&quot;:&quot;unLockDocument&quot;,&quot;isSave&quot;:false,&quot;unlock&quot;:true,&quot;deleteIndex&quot;:-1}]</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
                <stringProp name="throughput">${save-changes-throughput-per-minute}</stringProp>
                <intProp name="calcMode">0</intProp>
              </ConstantThroughputTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - close" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
            <boolProp name="replyToPing">false</boolProp>
            <stringProp name="filterType">FilterAll</stringProp>
          </eu.luminis.jmeter.wssampler.PingFrameFilter>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="close" enabled="true">
            <stringProp name="TestPlan.comments">close websocket connection</stringProp>
            <stringProp name="statusCode">1000</stringProp>
            <stringProp name="readTimeout">${close-timeout}</stringProp>
          </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="RespTimeGraph.interval">100</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
